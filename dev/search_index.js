var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TruncatedStreams","category":"page"},{"location":"#TruncatedStreams","page":"Home","title":"TruncatedStreams","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TruncatedStreams.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TruncatedStreams]","category":"page"},{"location":"#TruncatedStreams.FixedLengthIO","page":"Home","title":"TruncatedStreams.FixedLengthIO","text":"FixedLengthIO(io, length) <: TruncatedIO\n\nA truncated source that reads io up to length bytes.\n\njulia> io = IOBuffer(collect(0x00:0xff));\n\njulia> fio = FixedLengthIO(io, 10);\n\njulia> read(fio)\n10-element Vector{UInt8}:\n 0x00\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n 0x06\n 0x07\n 0x08\n 0x09\n\njulia> eof(fio)\ntrue\n\nAs soon as a read from a FixedLengthIO object would read past length bytes of the underlying IO stream, EOF is signalled, potentially leading to an EOFError being thrown.\n\njulia> read(fio, Int)\nERROR: EOFError: read end of file\n[...]\n\nSeeking does not affect the length at which the stream is truncated, but may affect how many bytes are available to read.\n\njulia> seek(fio, 8); read(fio)\n2-element Vector{UInt8}:\n 0x08\n 0x09\n\nWriting to a FixedLengthIO object does not affect the length at which the stream is truncated, but may affect how many bytes are available to read.\n\njulia> io = IOBuffer(collect(0x00:0x05); read=true, write=true); fio = FixedLengthIO(io, 10);\n\njulia> read(fio)\n6-element Vector{UInt8}:\n 0x00\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n\njulia> write(fio, collect(0x06:0xff));\n\njulia> seekstart(fio);  # writing advances the IOBuffer's read pointer\n\njulia> read(fio)\n10-element Vector{UInt8}:\n 0x00\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n 0x06\n 0x07\n 0x08\n 0x09\n\n\n\n\n\n","category":"type"},{"location":"#TruncatedStreams.SentinelIO","page":"Home","title":"TruncatedStreams.SentinelIO","text":"SentinelIO(io, sentinel) <: TruncatedIO\n\nA truncated source that reads io until sentinel is found.\n\njulia> io = IOBuffer(collect(0x00:0xff));\n\njulia> sio = SentinelIO(io, [0x0a, 0x0b]);\n\njulia> read(sio)\n10-element Vector{UInt8}:\n 0x00\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n 0x06\n 0x07\n 0x08\n 0x09\n\njulia> eof(sio)\ntrue\n\nAs soon as a read from a SentinelIO object would read the start of a byte sequence matching sentinel from the underlying IO stream, EOF is signalled, potentially leading to an EOFError being thrown.\n\njulia> read(sio, Int)\nERROR: EOFError: read end of file\n[...]\n\nSeeking does not affect reading of the sentinel, but may affect how many bytes are available to read.\n\njulia> seek(sio, 8); read(sio)\n2-element Vector{UInt8}:\n 0x08\n 0x09\n\nWriting to a SentinelIO object does not affect the length at which the stream is truncated, but may affect how many bytes are available to read.\n\njulia> io = IOBuffer(collect(0x00:0x07); read=true, write=true); sio = SentinelIO(io, [0x06, 0x07]);\n\njulia> read(sio)\n6-element Vector{UInt8}:\n 0x00\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n\njulia> write(sio, collect(0x01:0xff));\n\njulia> seekstart(sio);  # writing advances the IOBuffer's read pointer\n\njulia> read(sio)  # still the same output because the sentinel is still there\n6-element Vector{UInt8}:\n 0x00\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n\nDetection of eof can be reset with the Base.reseteof() method. Use this if the sentinel that was read is determined upon further inspection to be bogus.\n\njulia> Base.reseteof(sio)  # that last sentinel was fake, so reset EOF and read again\n\njulia> read(sio)  # returns the first sentinel found and continues to read until the next one is found\n7-element Vector{UInt8}:\n 0x06\n 0x07\n 0x01\n 0x02\n 0x03\n 0x04\n 0x05\n\nnote: Note\nIf the wrapped stream does not contain a sentinel, reading to the end of the stream will throw EOFError.\n\njulia> io = IOBuffer(collect(0x00:0x07)); sio = SentinelIO(io, [0xff, 0xfe]);\n\njulia> read(sio)\nERROR: EOFError: read end of file\n[...]\n\n\n\n\n\n","category":"type"},{"location":"#TruncatedStreams.TruncatedIO","page":"Home","title":"TruncatedStreams.TruncatedIO","text":"TruncatedIO <: IO\n\nWraps a streaming IO object that reads only as much as should be read and not a byte more.\n\nObjects inheriting from this abstract type pass along all IO methods to the wrapped stream except for bytesavailable(io) and eof(io). Inherited types must implement:\n\nTruncatedStreams.unwrap(::TruncatedIO)::IO: return the wrapped IO stream.\nBase.eof(::TruncatedIO)::Bool: report whether the stream cannot produce any more bytes.\n\nIn order to implement truncation, some number of these methods will likely need to be implemented:\n\nBase.unsafe_read(::TruncatedIO, p::Ptr{UInt8}, n::UInt)::Nothing: copy n bytes from the stream into memory pointed to by p.\nBase.read(::TruncatedIO, T::Type)::T: read and return an object of type T from the stream.\nBase.bytesavailable(::TruncatedIO)::Int: report the number of bytes available to read from the stream until EOF or a buffer refill.\nBase.seek(::TruncatedIO, p::Integer) and Base.seekend(::TruncatedIO): seek stream to position p or end of stream.\nBase.reset(::TruncatedIO): reset a marked stream to the saved position.\nBase.reseteof(::TruncatedIO)::Nothing: reset EOF status.\n\nNote that writing to the stream does not affect truncation.\n\nThe following methods must be implemented by the wrapped IO type for all the functionality of the truncated streams to work at all:\n\nBase.eof(::IO)::Bool\nBase.read(::IO, ::Type{UInt8})::UInt8\n\nThe wrapped stream also must implement Base.seek and Base.skip for seeking and skipping of the truncated stream to work properly. Additionally, Base.position needs to be implemented for some instances of Base.seek to work properly.\n\n\n\n\n\n","category":"type"},{"location":"#TruncatedStreams.unwrap","page":"Home","title":"TruncatedStreams.unwrap","text":"unwrap(s<:TruncatedIO) -> IO\n\nReturn the wrapped source.\n\n\n\n\n\n","category":"function"}]
}
